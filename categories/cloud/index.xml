<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cloud on Aryido Tech Note</title><link>https://aryido.github.io/categories/cloud/</link><description>Recent content in cloud on Aryido Tech Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Aug 2024 23:18:06 +0800</lastBuildDate><atom:link href="https://aryido.github.io/categories/cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>GCP - Pub/Sub 概述 I - 架構</title><link>https://aryido.github.io/posts/google-cloud/pubsub-1/</link><pubDate>Sat, 17 Aug 2024 23:18:06 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/pubsub-1/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Pub/Sub 是 Google 推出的 Message Service ，作為中介層(Middleware) 可讓一些系統解耦，並透過 Publish-Subscribe 的模式來 「異步 asynchronous」 收發消息，實現高可靠(highly reliable) 和高可擴展(scalable)的服務。 簡單以 Event-Driven 消息傳遞設計為主體概念的話，對應到其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>SQS + SNS&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Service Bus Messaging&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Pub/Sub 也簡化了許多 Message Service Infra 的管理如 Broker、Exchange、Queue 等這些底層架構組件並不會直接被使用者接觸，而是 GCP 完全代管且提供 &lt;a href="https://cloud.google.com/pubsub/sla?hl=en">Pub/Sub service level agreement (SLA)&lt;/a>，developer 僅需要瞭解 Message、Topic、Publisher、Subscription、Subscriber 這些接近應用程式端的 Components，算是降低入門檻可快速使用。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP 儲存服務 - 總整理</title><link>https://aryido.github.io/posts/google-cloud/storage-service-all/</link><pubDate>Tue, 13 Aug 2024 23:58:17 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/storage-service-all/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>在前面幾個章節有介紹了 GCP 常見的 Storage Service ，有提供了各種高可靠且高可擴展存儲服務產品，雲端化直觀的提供了「減輕管理服務基礎架構」的負擔，特別是是硬體角度的管理。從比較 High-Level 角度來討論的話，雲存儲的服務類型分成&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Block Storage&lt;/strong> : Compute-engine 的 Persistent Disk&lt;/li>
&lt;li>&lt;strong>Object Storage&lt;/strong> : &lt;a href="https://aryido.github.io/posts/google-cloud/cloud-storage/">Cloud Storage&lt;/a>&lt;/li>
&lt;li>&lt;strong>File Storage&lt;/strong> : &lt;a href="https://aryido.github.io/posts/google-cloud/filestore/">Filestore&lt;/a>&lt;/li>
&lt;li>&lt;strong>SQL&lt;/strong> : &lt;a href="https://aryido.github.io/posts/google-cloud/sql/">Cloud SQL&lt;/a>、&lt;a href="https://aryido.github.io/posts/google-cloud/spanner/">Cloud Spanner&lt;/a>&lt;/li>
&lt;li>&lt;strong>NoSQL&lt;/strong> : &lt;a href="https://aryido.github.io/posts/google-cloud/firestore/">Firestore&lt;/a>、&lt;a href="https://aryido.github.io/posts/google-cloud/bigtable-1/">Bigtable&lt;/a>、&lt;a href="https://aryido.github.io/posts/google-cloud/memorystore/">Memorystore&lt;/a>&lt;/li>
&lt;li>&lt;strong>Data Warehouse&lt;/strong> : &lt;a href="https://aryido.github.io/posts/google-cloud/bigquery-1/">Bigquery&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>
&lt;div class="figure fig-100" >
&lt;a class="fancybox" href="https://aryido.github.io/images/google-cloud/storage-service-summary/storage-services.jpg" data-fancybox="">
&lt;img class="fig-img" src="https://aryido.github.io/images/google-cloud/storage-service-summary/storage-services.jpg" >
&lt;/a>
&lt;/div>
在現今的雲端計算時代，儲存和管理大量資料變得更加重要，以上這幾種儲存服務需根據業務來選擇，因為這也會決定到訪問和管理組資料的難易程度，故以下對其做一些廣義的整理和筆記來幫助和選擇適合的儲存服務。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Bigquery 概述 I - 架構</title><link>https://aryido.github.io/posts/google-cloud/bigquery-1/</link><pubDate>Fri, 09 Aug 2024 23:08:24 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/bigquery-1/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>BigQuery 是 Google 提供的一個無伺服器資料倉儲 (Serverless Data Warehouse)，其支持 ANSI SQL 來搜尋資料，所以只要會 SQL 語法就可以立即開始使用，且可高效率分析 TB、PB 等級的資料，故 Bigquery 也是企業級雲端大數據資料分析平台。對應到其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Amazon Athena&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Synapse Analytics&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Google 在非常早期的時候，就有類似 BigQuery 其的服務就存在了，是自 2006 年以來一直在內部使用的 Dremel，後來隨著 GCP 雲端平台的產生，並於 2011 年以 BigQuery 為名被正式推出。目前是 GCP 分析資料的主力產品， Google 自家產品如搜尋引擎、 Gmail 等服務背後，其資料處理與分析的核心技術也和 Bigquery 息息相關。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Memorystore 概述</title><link>https://aryido.github.io/posts/google-cloud/memorystore/</link><pubDate>Wed, 07 Aug 2024 16:58:29 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/memorystore/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Memorystore 是 GCP 提供的完全託管 In-Memory Database 服務，可以輕鬆地在 GCP 上建立 Redis 和 Memcached 等著名的開源 &lt;strong>Caching-Engines&lt;/strong>，專門提供&lt;strong>毫秒級的低延遲資料存取/寫入&lt;/strong>，並減輕管理 Database 的部署 deployment、Replica、容錯移轉等等維運事項。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Amazon ElastiCache&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Cache&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Memorystore 也是屬於 NoSQL，由於常用於快取情境故也會被稱呼為&lt;strong>快取資料庫&lt;/strong>。目前看起來主流是使用 Redis，故建議在大部份的使用場景上，優先考慮使用 Redis。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud Spanner 概述</title><link>https://aryido.github.io/posts/google-cloud/spanner/</link><pubDate>Mon, 05 Aug 2024 22:13:08 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/spanner/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud Spanner 是 Google 開發的一個完全託管&lt;strong>關係型資料庫&lt;/strong>，屬於企業級 PaaS 解決方案，具有全球同步、全域事務、強一致性、可擴展、分散式和 Replica/Failover 功能，可保證 &lt;code>99.999% &lt;/code>可用性 SLA，使用者不需要多花心思在底層的基礎建設與管理。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Amazon Aurora&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure SQL Database (SQL Server base)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Cloud Spanner 於 &lt;code>2012&lt;/code> 年開始為 Google 內部的重量級產品如 Youtube、Gmail、Google PlayStore 等等提供服務，取代了 Google 的自定義 MySQL 且&lt;a href="https://cloud.google.com/blog/products/databases/inside-cloud-spanner-and-the-cap-theorem">號稱是盡量滿足 CAP 理論限制&lt;/a>。2020Q1 統計每月約 1 億活躍使用者，每天有高達 1800 萬次外送記錄的 Uber，是使用 CLOUD SPANNER 成功案例。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud SQL 概述</title><link>https://aryido.github.io/posts/google-cloud/sql/</link><pubDate>Sat, 03 Aug 2024 23:33:55 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/sql/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud SQL 是 GCP 提供針對 MySQL、PostgreSQL、SQL Server 推出的&lt;strong>完全託管關係型資料庫&lt;/strong>服務，讓使用者能夠從資料庫的管理任務中解放出來，花更多時間在資料本身而非硬體維護。雲端資料庫只是在雲端上建置、部署和存取的資料庫而已，其底層操作和傳統地端資料庫完全一樣，對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Amazon RDS&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure SQL Database for MySQL/PostgreSQL&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Cloud SQL 除了可快速啟用資料庫，還可以同時整合讀寫分離、同步、自動備份、監控等等，也讓我們能更安全便捷地整合 GCP 的其它雲端產品例如：「創建 Table 並從 Cloud Storage 導入 .sql 資料」、「使用 Cloud SQL Auth Proxy 連結到 Compute Engine」、「連接到 BigQuery 來使用聯合查詢」等等。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Bigtable 概述 II - 儲存模型</title><link>https://aryido.github.io/posts/google-cloud/bigtable-2/</link><pubDate>Wed, 31 Jul 2024 15:28:33 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/bigtable-2/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>由於 Bigtable 在 Google 內部廣為使用，故有於 2006 年發表了它的論文介紹：&lt;a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf">Bigtable: A Distributed Storage System for Structured Data&lt;/a>，然後在 2015/5 推出成為 GCP 雲端產品給大眾使用。 在 Google 官網上 Bigtable 的定義是一個 Sparsely-Populated-Table，其中 sparse 意思是如果某 Column 未在特定 Row 中使用，就不會佔用任何空間。&lt;/p>
&lt;p>Bigtable 也可以輕鬆擴展到數十億 Rows 和數千個 Columns ，能夠存儲 PB 級的資料量，適合 High-Throughput 場景的服務，是個強大的服務。而個人也覺得 Bigtable 是對有使用 GCP 的人常被問有沒有使用過的一個雲端服務之一，故可以特別看一下這個服務。(&lt;strong>第一名最常問的，我個人認為是 Bigquery&lt;/strong>)&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Bigtable 概述 I - 架構</title><link>https://aryido.github.io/posts/google-cloud/bigtable-1/</link><pubDate>Tue, 30 Jul 2024 21:58:50 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/bigtable-1/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Bigtable &lt;strong>並不是&lt;/strong>傳統 RDB 關係型資料庫，而是 GCP 提供的企業級 NoSQL Database，是一個支持大數據應用的&lt;strong>分散式存儲系統&lt;/strong>，保證高可擴展、高可用性、高性能與高吞吐需求的服務，與現有 Apache Big Data 生態系統的開源軟體如 HBase 也有蠻好的整合。對應到其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>DynamoDB&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Cosmos DB&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Bigtable 優勢在於其強大的擴充性，效能完全和 cluster 中的 Node 數量成正比，該產品的強大性完全不用質疑，因為 Google 的很多重量級專案都有使用 Bigtable 來存儲資料例如： Youtube、Google Earth、Google 搜尋引擎、Google Map 等等，每個專案都為數十億活躍使用者提供穩定的服務。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Firestore 概述</title><link>https://aryido.github.io/posts/google-cloud/firestore/</link><pubDate>Sat, 27 Jul 2024 18:02:56 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/firestore/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Firestore 是 Google 提供的一款雲端全代管無伺服器的 &lt;strong>Document NoSQL 資料庫&lt;/strong>，scale out 取向的設計會自動多區域資料複製 replication ，也有強一致性 query 和 transaction 支援。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>DocumentDB&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Cosmos DB&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Firestore 特別的一點是有提供 &lt;strong>realtime listeners 即時監聽器&lt;/strong>來同步 Firestore 資料庫和 client apps 之間的資料，同時也有提供 &lt;strong>offline support 離線支援&lt;/strong>，也就是說一旦雲端的 Firestore 有異動，資料便會自動同步到用戶端上 ; 另一方面當用戶端無法上網時會先存取資料在自己用戶端上，等到可以上網之後會跟雲端的 Firestore 資料庫互相同步。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud Filestore 概述</title><link>https://aryido.github.io/posts/google-cloud/filestore/</link><pubDate>Wed, 24 Jul 2024 19:05:55 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/filestore/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Filestore 是 Google Cloud 上完全託管的 Network FileSystem(簡稱 NFS)，目的讓不同的機器甚至是不同的作業系統都可以彼此分享檔案。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Elastic File System (EFS)&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Files&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Filestore 讀寫速度超級快，作為 file storage 並&lt;strong>支持併發同時訪問同一個檔案&lt;/strong>，還提供其他不同種類的存儲類型一些可選替代方案，例如把 Filestore 作為一種「 Persistent Disk 的 block storage 存儲種類 」或者「 類似 Cloud Storage FUSE 的 object storage 存儲種類」等等，因此它適用連接整合到多種 GCP Client 端服務如：VM、GKE、Cloud Run 等等。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud Storage 概述</title><link>https://aryido.github.io/posts/google-cloud/cloud-storage/</link><pubDate>Sun, 21 Jul 2024 20:56:57 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/cloud-storage/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud Storage 簡稱為 GCS ，是 Google 提供的 Object Storage，會把物件儲存在一個名叫 &lt;strong>Bucket&lt;/strong> 的容器內，而 Bucket 還可以有類似劃分資料夾的功能稱 &lt;strong>Managed Folders&lt;/strong>，可以針對這些資料夾加上個別的 IAM 來提供更精細的存取權限。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Simple Storage Service (S3)&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Blob Storage&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Cloud Storage 是具有高性能 BLOB（Binary Large Object）儲存裝置，基本上可當成是&lt;strong>近乎無限大的檔案儲存空間&lt;/strong>，不用預先配置容量也無需花費心力去管理容量，並提供 User 以 Google Web Console 介面 、SDK 或 RESTful API 的方式，簡單直觀地存取儲存的 Object。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Compute Service 總整理</title><link>https://aryido.github.io/posts/google-cloud/compute-service-all/</link><pubDate>Sat, 20 Jul 2024 23:41:17 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/compute-service-all/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>前面幾個章節有介紹了 Google Cloud 中常見的幾個 Compute Service 運算服務，分別是： &lt;a href="https://aryido.github.io/posts/google-cloud/compute-engine/">Compute Engine&lt;/a>、&lt;a href="https://aryido.github.io/posts/google-cloud/cloud-functions/">Cloud Functions&lt;/a>、&lt;a href="https://aryido.github.io/posts/google-cloud/cloud-run/">Cloud Run&lt;/a>、&lt;a href="https://aryido.github.io/posts/google-cloud/gke/">Google Kubernetes Engine&lt;/a>。另外補充一個現在可能比較少被提到的 App Engine，它也是屬於 GCP 運算服務，只要上傳滿足格式的程式碼就可以開始運作，會自動做負載平衡且並不需要管理任何硬體機器，聽說當年很紅的&lt;a href="https://cloud.google.com/files/Rovio.pdf">遊戲 &lt;strong>Angry Birds&lt;/strong> 就是使用 App Engine&lt;/a> 來作為服務平台。&lt;/p>
&lt;p>以上這五種運算服務應該在什麼情況下選擇呢？ 選擇正確的基礎架構服務來運行 APP 是很重要的，故以下對其做一些廣義的整理和筆記：
&lt;div class="figure fig-100" >
&lt;a class="fancybox" href="https://aryido.github.io/images/google-cloud/compute-service-summary/compute-services.jpg" data-fancybox="">
&lt;img class="fig-img" src="https://aryido.github.io/images/google-cloud/compute-service-summary/compute-services.jpg" >
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Google Kubernetes Engine 概述</title><link>https://aryido.github.io/posts/google-cloud/gke/</link><pubDate>Mon, 15 Jul 2024 20:06:13 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/gke/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Google Kubernetes Engine 簡稱是 GKE ，是一個由 Google 管理的 Kubernetes 開源容器編排平台的實現。因為 Kubernetes 的前身 Borg 本來就是 Google 內部的產品，憑藉著這樣的背景，GKE 號稱對於 Kubernetes 的支援跟擴展性跟其它雲端比起來會是最好的。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>EKS&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>AKS&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>雲端化的 Kubernetes 簡單的說就是&lt;strong>把可在地端原生的 Kubernetes 放到雲端上運行&lt;/strong>，由雲供應商幫助我們大幅簡化集群的設置管理與維運。由於只是讓雲供應商託管 Kubernetes ，最終差異也只是看雲供應商如何「預設」和「整合自己平台其他服務」至 k8s 罷了，本質上 EKS、AKS、GKE 差異並不大，故基本上不推薦更換 Kubernetes 服務的雲供應商或使用多雲，會考慮 GKE 的公司，大多都是只是思考怎樣更方便的整合 Kubernetes 和 GCP 的各種服務而已。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud Run 概述</title><link>https://aryido.github.io/posts/google-cloud/cloud-run/</link><pubDate>Sat, 13 Jul 2024 23:14:20 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/cloud-run/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud Run 是一套基於 Knative 的全代管無伺服器容器平台，也屬於 Google Cloud 中的 FaaS 服務，功能是可在 GCP 託管的環境中運行 &lt;strong>Container&lt;/strong> 且已經具有&lt;strong>高擴展性&lt;/strong>基礎架構。若從「無基礎建設的容器化平台（Containers without infrastructure）」的角度來說，對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>AWS App Runner&lt;/strong>、&lt;strong>Fargate&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Container Apps&lt;/strong>、&lt;strong>Azure Container Instances&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Cloud Run 一個蠻大的好處是 : 如果已經把程式打包成 Container Image 鏡象檔，那就可以使用&lt;strong>任何程式語言&lt;/strong>來部署，但其實 &lt;strong>Container Image 化是可選的&lt;/strong>，如果使用的是 Go、Node.js、Python、Java 等等常用的語言，也可以直接使用 Source Code 的方式來部署，讓我們可以使用 FaaS 的概念去執行如 Web Server 比較大型一點的程式。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud Functions 概述</title><link>https://aryido.github.io/posts/google-cloud/cloud-functions/</link><pubDate>Fri, 12 Jul 2024 23:26:00 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/cloud-functions/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud Functions 是一個&lt;strong>無伺服器的雲端執行環境&lt;/strong> (serverless execution environment)，會把寫出來的 code 完全託管給 GCP 並且無需配置任何 Infra 也不用管理任何 Servers 就可以執行了，對於程式設計師來說只需要專注在自己的程式邏輯即可，基本完全省去管理硬體的煩惱，為最標準的 &lt;strong>FaaS&lt;/strong> 類型服務。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>AWS Lamda&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Functions&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Cloud Functions 可以用 Java、Python、Node.js、Go 等常用 coding language 來撰寫，適用於部署單一化用途的程式，或用於連接擴展其他的 GCP 雲端服務，以 Events and triggers 為其核心設計思想。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud NAT 概述</title><link>https://aryido.github.io/posts/google-cloud/cloud-nat/</link><pubDate>Tue, 02 Jul 2024 20:18:34 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/cloud-nat/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud NAT 全稱是 Cloud Network Address Translation，是 Google Cloud 代管的 IP 轉譯服務，可在不公開 IP 位址的情況下，讓 GCP VM 或 GKE 內的 Pod 可以高效的&lt;strong>連接上&lt;/strong>「外部網路 Internet」，而外部資源無法直接存取 Cloud NAT gateway 後方的資源，維持獨立性與安全性。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>NAT gateways&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure NAT Gateway&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Cloud NAT 是以 Software-defined Networking 服務，中間不存在 proxy instance ，故性能方面比傳統 NAT 好上不少。除了 VM、GKE 之外，也可使用在 Cloud Run、Cloud Functions、App Engine 等服務。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud DNS 概述</title><link>https://aryido.github.io/posts/google-cloud/cloud-dns/</link><pubDate>Mon, 01 Jul 2024 23:26:00 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/cloud-dns/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud DNS 是 Google 提供的代管式的全球 Domain Name System(網域名稱系統服務)，為一個&lt;strong>分布式的分層資料庫(hierarchical distributed database)&lt;/strong> 用於存儲 IP addresses 和 Domain Name 的對應關係，還可以建立 DNS Zone 並在其下管理和創建 Record 。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Amazon Route 53&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure DNS&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Cloud DNS 是&lt;strong>提供代管功能而不是註冊&lt;/strong>，而代管的好處是有一個「共同管理維護」的介面 ; 還能「基於地理位置」將流量轉到最接近的服務器從而提高性能與速度 ; 結合「 GCP 雲端安全服務」保護應用程式免於如 DDoS 攻擊。 最後比較特別的是 Google 的 Cloud DNS 服務號稱是 &lt;a href="https://cloud.google.com/dns/sla">100% SLA&lt;/a> 服務保證絕對不會中斷， Google 對其 DNS 服務設計非常的有信心。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud CDN 概述</title><link>https://aryido.github.io/posts/google-cloud/cloud-cdn/</link><pubDate>Mon, 24 Jun 2024 23:26:00 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/cloud-cdn/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>CDN 全名為 Content Delivery Network，是一種透過分散在不同地區的 server，用離使用者&lt;strong>最近的伺服器&lt;/strong>來傳送快取內容。而 Cloud CDN，就是借助 Google 分佈在&lt;strong>全球各地&lt;/strong>的網路節點，將內容以快取(Cache)形式預先儲存，以達到最快速的內容交付。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Amazon CloudFront&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure CDN&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Cloud CDN 會需要與 GCP-Load-Balancer 搭配使用&lt;/strong>，故建議可以先熟習 GCP 負載平衡器的基本用法和觀念。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Cloud Load Balancing 架構概述</title><link>https://aryido.github.io/posts/google-cloud/cloud-load-balancing/</link><pubDate>Mon, 17 Jun 2024 16:54:22 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/cloud-load-balancing/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud Load Balancing 是 GCP 透過平均分發流量到多個 server ，以防止單一伺服器的過載從而減少系統故障的風險的產品，對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Elastic Load Balancing&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Load Balancer&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>因為只需透過配置&lt;strong>單個&lt;/strong>對外 IP 地址和憑證，就可讓負載平衡器的內部的管理的所有 VM 被外網存取，故從購買 External IP 的角度來說 Load Balancing 也可算是一種降低維運成本的方式。&lt;/p>
&lt;p>目前從 GCP console 上由&lt;strong>流量類型&lt;/strong>大概分成了「 HTTP(S) 」和 「 TCP/UPD 」兩類負載平衡器，但實際上依照細部功能，還有分 Global/Regional 和 Internal/External 等等，總體設定蠻細緻的 :&lt;/p>
&lt;div class="figure fig-100" >
&lt;a class="fancybox" href="https://aryido.github.io/images/google-cloud/lb/lb-types.jpg" data-fancybox="">
&lt;img class="fig-img" src="https://aryido.github.io/images/google-cloud/lb/lb-types.jpg" >
&lt;/a>
&lt;/div>
&lt;/blockquote></description></item><item><title>GCP - Managed instance groups 概述</title><link>https://aryido.github.io/posts/google-cloud/managed-instance-groups/</link><pubDate>Sun, 16 Jun 2024 22:54:22 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/managed-instance-groups/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud 是最能展現&lt;strong>自動伸縮擴展服務&lt;/strong>功能的平台，而 GCP 的 Autoscaling Groups of Instances 代表產品是 Managed Instance Groups (簡稱 MIGs) ，雖然名稱有一點點不太直覺。 GCP 會根據自訂義 Autoscaling Policy 來自動添加或刪除 VM ，這些自動縮放而產生的 VM 會有一個&lt;strong>群組&lt;/strong>來管體，就是 MIG。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Auto Scaling groups&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Virtual Machine Scale Set&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>MIGs 的 Autoscaling Policy 能夠基於 Application 的 CPU/Memory 使用率、網路流量等等設定，自動增加或減少資源，根據業務需求靈活調整資源數量從而保證&lt;strong>高性能&lt;/strong>和&lt;strong>成本彈性&lt;/strong>。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Network Tag 概述</title><link>https://aryido.github.io/posts/google-cloud/network-tags/</link><pubDate>Mon, 03 Jun 2024 22:59:14 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/network-tags/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Network Tag 在 GCP 中，只是一個簡單的字符串標示並不會建立出雲端資源，&lt;strong>會簡稱為 Tag&lt;/strong> 並可選擇附加到如 VM 或 Instance template 上，其設計想法上是可以由這個標示，更有效地控制和管理 VM 的網路防火牆安全設定。 Network Tag 算是 GCP 比較特別的設計，其他雲端似乎沒有比較類似的對應，由於不是一個獨立的 cloud resource ，所以是無法單獨建立 Tag 的，但對於其關聯的 GCP Firewall Rules ，對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Security Groups&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Network security groups&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>特別要注意的事情是在 GCP 中，Tag 和 Label 是不一樣的東西。通常 GCP 提到 tag 都是指 network tag 這個網路安全相關防火牆設定 ; 而 Label 是拿來作預算及資源管理使用。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - VPC Firewall Rules 概述</title><link>https://aryido.github.io/posts/google-cloud/firewall-rule/</link><pubDate>Mon, 03 Jun 2024 22:59:14 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/firewall-rule/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>GCP Firewall 提供精細的安全控制機制的雲端資源，可以讓資源管理者保護其 VPC 內資料，不會收到未經授權的訪問或者意外流出資料，從而提高安全性和隱私性。 GCP 防火牆其實是一個蠻大的類別，產品全稱是 Cloud Next Generation Firewall 簡稱 Cloud NGFW，其中可分成：「 Cloud NGFW Essentials 」、「 Cloud NGFW Enterprise 」、「 Cloud NGFW Standard 」。但通常在我們在 GCP 提到的防火牆，其實都是指最常用的 &lt;strong>Firewall-Rules 防火牆規則&lt;/strong> ，隸屬於 Cloud NGFW Essentials，只能應用在給定的 project 和指定的 VPC，對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Security Groups&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Network security groups&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>如果想要把 Firewall-Rules 應用到 organization 下的其他 project 或者其他 VPC，則要使用 Firewall-Policies，本篇重點介紹 Firewall-Rules。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - IP addresses 概述</title><link>https://aryido.github.io/posts/google-cloud/ip-address/</link><pubDate>Sun, 02 Jun 2024 14:51:14 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/ip-address/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>GCP IP Address 經常是分配給 GCP VM Instance 和 GCP Load-Balancer 使用，讓他們可以和 GCP 其他雲端資源，或者是外部公共網路上的系統通訊。IP Address 劃分也蠻多的，會使用以下種類來描述不同的類型：&lt;/p>
&lt;ul>
&lt;li>Internal IP Address &amp;lt;=&amp;gt; External IP Address&lt;/li>
&lt;li>Private IP Address &amp;lt;=&amp;gt; Public IP Address&lt;/li>
&lt;li>Ephemeral IP Address &amp;lt;=&amp;gt; Static IP Address&lt;/li>
&lt;li>Regional IP Address &amp;lt;=&amp;gt; Global IP Address&lt;/li>
&lt;/ul>
&lt;p>此篇會全部做簡單的介紹。而在使用 IP Address 也常發生一些使用上的疏忽，例如一直 reserve IP 卻沒有使用它，因為 IP 算是稀有資源，如果有保留固定 IP ，就算沒有使用還是會持續計費的，而且會更貴！&lt;/p>
&lt;/blockquote></description></item><item><title>Cloud NAT 概述</title><link>https://aryido.github.io/not-yet-finished/cloud-nat/</link><pubDate>Thu, 30 May 2024 18:52:24 +0800</pubDate><guid>https://aryido.github.io/not-yet-finished/cloud-nat/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;/blockquote></description></item><item><title>GCP - Virtual Private Cloud 概述</title><link>https://aryido.github.io/posts/google-cloud/vpc/</link><pubDate>Thu, 30 May 2024 18:52:24 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/vpc/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Virtual Private Cloud 虛擬私有雲網路，可簡寫成 VPC、網路、VPC Network、Network 等等都可以，是 Google 使用 &lt;a href="https://01.me/2014/03/networking-at-google/">Andromeda&lt;/a>(/ænˈdrɑː.mə.də/) 網路虛擬化技術實現的一個雲端資源，提供如 GCP-VM、GKE、Serverless Workloads 和 App Engine 等等雲端服務的網路功能，能讓 User 可以高自由度地建立管理和優化網路架構。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>Amazon VPC&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Azure Virtual Network&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>GCP-VPC 和 AWS-VPC 架構上蠻不一樣的，GCP-VPC 是全球性的，只要在同一個 GCP-VPC 內，就算不同 Region 也能使用 Internal IP ; 但如果是不同的 GCP-VPC 就算在同一個 Region 也不能互相通訊。而 AWS-VPC 是針對 Region 來設計的，故只要跨 Region 就不是內網無法直接溝通需再多做其他設定。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Instance Template 概述</title><link>https://aryido.github.io/posts/google-cloud/instance-template/</link><pubDate>Fri, 24 May 2024 19:26:00 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/instance-template/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Instance Template 一個用於定義 VM instance 配置的模板，其中包括如 machine type、bootdisk、startup script 等等實例屬性，經常和 Instance Groups 結合使用來自動創建 VM instance。對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : **Launch Template **&lt;/li>
&lt;li>Microsoft Azure : 沒有直接類似的，需在 Virtual Machine Scale Sets 內直接設定 VM 所需參數設定&lt;/li>
&lt;/ul>
&lt;p>概念上就是做好 VM 的模板，讓 VM 啟動完成後直接就可以達到我們想要的狀態，從這個方向出發的話: Startup Script、Custom Image、Instance Template 都蠻類似的，等等都會介紹和比較一下。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP - Compute Engine 概述</title><link>https://aryido.github.io/posts/google-cloud/compute-engine/</link><pubDate>Thu, 23 May 2024 23:26:00 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/compute-engine/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Compute Engine 是託管在 Google 雲端上基礎架構即服務 (IaaS) 產品，其他的稱呼還有 &lt;strong>compute engine instance&lt;/strong> 、 &lt;strong>virtual machine instance&lt;/strong> 、 &lt;strong>VM instance&lt;/strong>。 對應其他的雲端服務是 :&lt;/p>
&lt;ul>
&lt;li>Amazon Web Services (AWS) : &lt;strong>EC2&lt;/strong>&lt;/li>
&lt;li>Microsoft Azure : &lt;strong>Virtual Machine&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>啟動前可以訂製自己需要的 Machine Type ，例如 CPU、memory、disk 等等；再來 Boot disk OS 也可自行選擇 Linux 、 Windows 等等操作系統；針對容器虛擬化，可能使用專門優化來運行容器的 Container-Optimized OS (COS) image 在虛擬機上啟動容器服務。最後關於&lt;strong>備份資料&lt;/strong>，GCP 也有提供相應的服務來面對災難發生時的處理。&lt;/p>
&lt;/blockquote></description></item><item><title>AWS EKS</title><link>https://aryido.github.io/posts/aws/eks/</link><pubDate>Sat, 17 Dec 2022 18:45:30 +0800</pubDate><guid>https://aryido.github.io/posts/aws/eks/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>ECS 很常拿來與 Kubernetes 比較，而 2017 aws 又進一步宣佈了 Amazon Elastic Container Service for Kubernetes(EKS)，使 aws 平台可以託管 k8s 服務。EKS 服務可以省去安裝以及操作自己的 Kubernetes 叢集的時間，輕鬆的在 AWS 上執行 Kubernetes；進一步地，可使用 Fargate 模式在 &lt;em>EKS&lt;/em> 上，可連 node 機器都不用管理。&lt;/p>
&lt;/blockquote></description></item><item><title>AWS ECS</title><link>https://aryido.github.io/posts/aws/ecs/</link><pubDate>Sat, 17 Dec 2022 16:30:30 +0800</pubDate><guid>https://aryido.github.io/posts/aws/ecs/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Amazon Elastic Container Service（ECS）標誌著 AWS 進入 CaaS 市場。在 Kubernetes 還沒有出現時，各家雲端大廠對於&lt;strong>容器化的管理工具&lt;/strong>都有自己實作。對應在 AWS 上的容器編排平台，是在 2014 年宣佈的 ECS 服務。後續進一步改進，發布 ECS with Fargate，可讓我們運行 container，而&lt;strong>無需管理伺服器或集群&lt;/strong>。 故 Amazon ECS 具有兩個常用模式：&lt;/p>
&lt;ul>
&lt;li>EC2 啟動類型&lt;/li>
&lt;li>Fargate 啟動類型&lt;/li>
&lt;/ul>
&lt;p>以下分別進行介紹。&lt;/p>
&lt;/blockquote></description></item><item><title>Overview Fargate</title><link>https://aryido.github.io/posts/aws/fargate/</link><pubDate>Sat, 17 Dec 2022 16:30:30 +0800</pubDate><guid>https://aryido.github.io/posts/aws/fargate/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>2017年，AWS 推出了 Fargate，這是一個用於部署和管理容器的&lt;strong>模式&lt;/strong>，代表用戶無需管理 EC2 基礎設施。 Fargate 的核心理念就是 &lt;strong>Serverless&lt;/strong> ，讓 ECS 用戶專注於任務和服務定義，而不是管理集群基礎設施，Fargate 可配合用於 &lt;em>ECS&lt;/em> 和 &lt;em>EKS&lt;/em>。&lt;/p>
&lt;/blockquote></description></item><item><title>AWS Overview: ECS | EKS</title><link>https://aryido.github.io/posts/aws/aws-ecs-eks/</link><pubDate>Tue, 13 Dec 2022 21:28:20 +0800</pubDate><guid>https://aryido.github.io/posts/aws/aws-ecs-eks/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>ECS (Elastic Container Service) 和 EKS（Elastic Kubernetes Service）都是 AWS 上提供的 Container Orchestration ( 容器管理工具 )，核心都是&lt;strong>中央控制管理&lt;/strong>運行的容器化應用程式，以下來簡單介紹一下吧。&lt;/p>
&lt;/blockquote></description></item><item><title>cloud init 簡介</title><link>https://aryido.github.io/posts/cloud/cloud-init/</link><pubDate>Tue, 29 Nov 2022 20:23:44 +0800</pubDate><guid>https://aryido.github.io/posts/cloud/cloud-init/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>cloud-init 是一個 package，可以藉由配置 cloud-init 來執行各種任務，自動初始化 cloud instance。在初次開機時就將想要的檔案或設定與系統一併弄好而不用手動處理。大部分雲平台都支持 cloud-init，目前是 &lt;strong>industry standard (行業標準)&lt;/strong>。&lt;/p>
&lt;/blockquote></description></item><item><title>Packer build machine image 偶爾會出錯誤</title><link>https://aryido.github.io/posts/cloud/packer-build-image-error/</link><pubDate>Mon, 28 Nov 2022 22:04:39 +0800</pubDate><guid>https://aryido.github.io/posts/cloud/packer-build-image-error/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>使用 Packer 建立 AWS EC2 AMI 或者是 GCP Machine Image，兩個都會有機率發生一些問題， 有時候是 image 內一些應用程式安裝出現問題；有時候是再最後啟動 AWS 或 GCP 虛擬機時，使用 user-data 或 startup-script 時會出現問題，共同的錯誤訊息是 &lt;strong>no installation candidate.&lt;/strong> 。 AWS 機率發生體感機率比 GCP 高不少。那問題的根源是什麼呢，來看看吧!&lt;/p>
&lt;/blockquote></description></item><item><title>Google Cloud CLI : Auth Credentials</title><link>https://aryido.github.io/posts/google-cloud/gcp-cli-3/</link><pubDate>Sat, 22 Oct 2022 16:13:45 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/gcp-cli-3/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>最近使用 gcloud CLI 時，有遇到自己錯誤理解的部分，是關於 gcloud 管理的兩組 credentials :&lt;/p>
&lt;ul>
&lt;li>gcloud auth application-default login&lt;/li>
&lt;li>gcloud auth login&lt;/li>
&lt;/ul>
&lt;p>這兩個到底有甚麼不同呢 ? 來記錄一下吧 ~&lt;/p>
&lt;/blockquote></description></item><item><title>AWS load-balancer 基礎介紹</title><link>https://aryido.github.io/posts/aws/aws-load-balancer/</link><pubDate>Mon, 17 Oct 2022 22:00:06 +0800</pubDate><guid>https://aryido.github.io/posts/aws/aws-load-balancer/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>AWS 目前有多種 Load Balancing&lt;/p>
&lt;ul>
&lt;li>Application Load Balancer&lt;/li>
&lt;li>Network Load Balancer&lt;/li>
&lt;li>Classic Load Balancer&lt;/li>
&lt;/ul>
&lt;p>對於 Classic Load Balancer ，除非還有 ec2 運行在 ec2-classic 網路的場景，要不然已經&lt;strong>不建議&lt;/strong>使用了，建議使用 Application Load Balancer 、 Network Load Balancer 取代。&lt;/p>
&lt;/blockquote></description></item><item><title>GCP Filestore vs AWS EFS 收費標準</title><link>https://aryido.github.io/posts/cloud/filestore-vs-efs/</link><pubDate>Fri, 07 Oct 2022 22:03:14 +0800</pubDate><guid>https://aryido.github.io/posts/cloud/filestore-vs-efs/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>雲端資源在使用的時候，可以特別注意收費的部分。 例如 GCP Filestore 和 AWS EFS 都是有關於 file share 的功能，但計費方式卻很不一樣。養成沒事看看雲端 billing 可以幫助止血&amp;hellip;，踩完坑之後就來看看付費公式吧 !&lt;/p>
&lt;/blockquote></description></item><item><title>AWS 與 GCP reliability 不同的地方比較 - 2</title><link>https://aryido.github.io/posts/cloud/reliability2/</link><pubDate>Tue, 04 Oct 2022 22:23:28 +0800</pubDate><guid>https://aryido.github.io/posts/cloud/reliability2/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>前段時間社群上有人 po 出 GCP 和 AWS 的比較，然後測出 GCP 慘烈的 VM 生成時間和一堆 409 錯誤，聽說有驚動 Google 高層(&lt;del>怕.jpg&lt;/del>)。那現在我們來針對該作者開源的測試程式來看看吧!&lt;/p>
&lt;/blockquote></description></item><item><title>AWS 與 GCP reliability 不同的地方比較 - 1</title><link>https://aryido.github.io/posts/cloud/reliability1/</link><pubDate>Sat, 24 Sep 2022 19:31:37 +0800</pubDate><guid>https://aryido.github.io/posts/cloud/reliability1/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>近期有機會來比較一下 AWS 和 GCP 的一些差別，也看了一些文章(&lt;del>練英文QQ&lt;/del>)。 GCP 和 AWS 都有 auto scaling 的功能，當我們在某些時候，需要比較多的資源處理事情時，可以自動增加機器來維持高 reliability。 那這部分 GCP 和 AWS 有甚麼區別呢 ?&lt;/p>
&lt;/blockquote></description></item><item><title>Google Cloud CLI : Access Token</title><link>https://aryido.github.io/posts/google-cloud/gcp-cli-2/</link><pubDate>Sat, 17 Sep 2022 00:23:55 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/gcp-cli-2/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>使用 GCP 時，都要登入雲端才能獲得授權。 gcloud CLI 提供了兩個方式：&lt;/p>
&lt;ul>
&lt;li>User account authorization&lt;/li>
&lt;li>Service account authorization&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Google Cloud CLI : Initialization GCP Project</title><link>https://aryido.github.io/posts/google-cloud/gcp-cli-1/</link><pubDate>Thu, 15 Sep 2022 23:13:26 +0800</pubDate><guid>https://aryido.github.io/posts/google-cloud/gcp-cli-1/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>gcloud CLI 可以用於創建和管理 gcp 資源的工具。雖然可以使用 CLI 從命令行或腳本，自動化執行許多常見的任務。但更多是會用例如 &lt;strong>Terraform&lt;/strong> 來部屬資源。故現在基本上用最多是在初始化&lt;/p>
&lt;ul>
&lt;li>&lt;strong>管理身份驗證(manage authentication)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>自定義本地配置(customize local configuration)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>這些和權限管理、project設定有關的功能。&lt;/p>
&lt;/blockquote></description></item></channel></rss>