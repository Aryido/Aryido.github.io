<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>binary-search on Aryido Tech Note</title><link>https://aryido.github.io/tags/binary-search/</link><description>Recent content in binary-search on Aryido Tech Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Dec 2022 18:32:09 +0800</lastBuildDate><atom:link href="https://aryido.github.io/tags/binary-search/index.xml" rel="self" type="application/rss+xml"/><item><title>410. Split Array Largest Sum - binary search</title><link>https://aryido.github.io/posts/leetcode/leetcode410-2/</link><pubDate>Sun, 11 Dec 2022 18:32:09 +0800</pubDate><guid>https://aryido.github.io/posts/leetcode/leetcode410-2/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>前面有介紹用 dp 方式把這題給解了，但看一下 Related Topics 發現也可以用 Binary Search 求解，上網參考大神們的解法，感覺特別巧妙。因為這題可用 dp 和 Binary Search，也變成是一道高頻難題。
這邊記錄一下大神們的想法，我其實還是沒有很明白 QQ&amp;hellip;&lt;/p>
&lt;/blockquote></description></item><item><title>410. Split Array Largest Sum</title><link>https://aryido.github.io/posts/leetcode/leetcode410/</link><pubDate>Sun, 27 Nov 2022 20:26:22 +0800</pubDate><guid>https://aryido.github.io/posts/leetcode/leetcode410/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>這題真的蠻難的，其實一開始看題目我也覺得很繞口，給了一個非負數的 nums 和一個 m 代表把 nums 分成 m 個 group 且 每個 group non-empty ；取 m 個 group 中的最大值，那前面只是一種切法，我們是要找所有可能分法之中的最小值。看一下 Related Topics 發現可以用 Binary Search 和 DP 求解，感覺也會是一道高頻題目。(Binary Search 未完待續&amp;hellip;)&lt;/p>
&lt;/blockquote></description></item><item><title>1011. Capacity To Ship Packages Within D Days</title><link>https://aryido.github.io/posts/leetcode/leetcode1011/</link><pubDate>Sat, 15 Oct 2022 19:18:43 +0800</pubDate><guid>https://aryido.github.io/posts/leetcode/leetcode1011/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>這題是 Google 面試題，在 Hide Hint 中表示可以使用 binary-search 解決，剛開始覺得蠻 tricky 的，但仔細思考會覺得 binary-search 很符合這題目。&lt;/p></description></item><item><title>Binary Search - 2 各式模板</title><link>https://aryido.github.io/posts/algorithm/binary-search2/</link><pubDate>Sat, 15 Oct 2022 17:47:39 +0800</pubDate><guid>https://aryido.github.io/posts/algorithm/binary-search2/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>前面有介紹了 Binary Search 的通用模板，但通用模板還是有缺點，就是要找的目標須在一個 array 內，這樣才能定義 index ，才能定義 &lt;em>l = -1&lt;/em> 和 &lt;em>r = N&lt;/em> 兩個在 array 區間外的 index。 但很多時候題目並不會有一個準確的 array 定義出來，還是需要了解各個模板才能比較好的去解答各式題目的邊界。&lt;/p>
&lt;/blockquote></description></item><item><title>Binary Search - 1 觀念介紹</title><link>https://aryido.github.io/posts/algorithm/binary-search1/</link><pubDate>Sat, 15 Oct 2022 16:27:29 +0800</pubDate><guid>https://aryido.github.io/posts/algorithm/binary-search1/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Binary-Search，二分搜尋法是一種針對&lt;strong>已經排好序區間&lt;/strong>內的 &lt;strong>O(logN)&lt;/strong> 的搜索方式。
Binary-Search 會發現處理邊界時很容易出錯。 基本上都是沒注意到兩大原則 :&lt;/p>
&lt;ul>
&lt;li>每次都一定要縮減收所區域&lt;/li>
&lt;li>每次縮減不能排除潛在答案&lt;/li>
&lt;/ul>
&lt;p>雖然真的淺顯易見，但實踐在寫的時候還是常常會寫出bug。&lt;/p>
&lt;/blockquote></description></item></channel></rss>